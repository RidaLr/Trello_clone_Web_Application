CREATE TABLE tasks
        ( author_id TEXT NOT NULL
        , content TEXT
        , timestamp DOUBLE
        , status TEXT
        , FOREIGN KEY (author_id) REFERENCES users(email)
        );
.quit
.tasks
.quit
drop db.sqlite
;
drop "db.sqlite"
;
drop db
;
rm db.sqlite
;
.quite
.quit
CREATE TABLE users      
        ( name TEXT NOT NULL
        , password_hash TEXT NOT NULL
        , email TEXT NOT NULL PRIMARY KEY
        );
CREATE TABLE tasks
        ( author_id TEXT NOT NULL
        , content TEXT
        , timestamp DOUBLE
        , status TEXT
        , FOREIGN KEY (author_id) REFERENCES users(email)
        );
.quit
.users
descrobe user
;
descrobe users;
describe users;
show users;
.schema users;
.schema users;
pragma table_info('users')
;
pragma table_info('users');
table_info('users');
pragma table_info('users');
pragma table_info('work');
.tables;
.tables
.tables
.schema users;
.tables
.schema users;
exit
;
db.sqlite 
;
open db.sqlite ;
open db.sqlite;
.db.sqlite;
.help;
.help
exit;
quit
;
.quit
.quit
.open .data/db.sqlite
.open users
.open users
select * from tasks;
.databases
.open .data/users
.open /app/.data/users
.quit
select rowid from users;
select email from users;
.exit
.exit
.tables
select * from users;
.quit
